[project]
name = "survey-studio"
version = "0.1.0"
description = "A multi-agent literature review assistant using AutoGen and Streamlit"
authors = [
    {name = "Aditya Gambhir", email = "gambhir.aditya19@gmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
keywords = ["literature-review", "autogen", "streamlit", "arxiv", "research"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Text Processing :: General",
]
requires-python = ">=3.12.11"
dependencies = [
    "streamlit>=1.38.0",
    "arxiv>=2.1.0",
    "autogen-core>=0.4.1",
    "autogen-agentchat>=0.4.1",
    "autogen-ext>=0.4.1",
    "openai>=1.53.0",
    "tenacity>=8.5.0",
    "tiktoken>=0.11.0",
    "markdown-it-py (>=3.0.0)",
]

[project.optional-dependencies]
dev = [
    "ruff==0.6.9",
    "pytest==8.3.2",
    "pytest-asyncio==0.23.8",
    "pytest-cov==5.0.0",
    "coverage==7.6.1",
    "pre-commit==3.8.0",
    "detect-secrets==1.5.0",
    "pyright==1.1.405",
]

[project.scripts]
survey-studio = "survey_studio.app:main"

[project.urls]
Homepage = "https://github.com/Aditya-gam/survey-studio"
Repository = "https://github.com/Aditya-gam/survey-studio"
Documentation = "https://github.com/Aditya-gam/survey-studio/wiki"
"Bug Reports" = "https://github.com/Aditya-gam/survey-studio/issues"

[tool.poetry]
packages = [{include = "survey_studio", from = "src"}]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py312"
line-length = 88
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PIE", # flake8-pie
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SLF", # flake8-self
    "TID", # flake8-tidy-imports
    "ERA", # eradicate (commented-out code)
    "PL",  # pylint
]
ignore = []

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["N806"]
"**/migrations/*.py" = ["E501", "D100", "D101", "D102", "D103", "D104"]

[tool.ruff.lint.isort]
known-first-party = ["survey_studio"]
combine-as-imports = true
force-sort-within-sections = true

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.format]
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
update_changelog_on_bump = true


[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src/survey_studio",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=95"
]
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "src/survey_studio/app.py",      # Streamlit UI - integration tested separately
    "src/survey_studio/backend.py",  # Simple re-export module
    "src/survey_studio/ui/components.py",  # Placeholder file
    "src/survey_studio/ui/toasts.py",  # Streamlit UI components - integration tested separately
]

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.report]
show_missing = true
fail_under = 95
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "from __future__ import annotations",  # Type checking import in export.py
]

[tool.pyright]
# Pyright configuration for strict type checking
include = ["src"]
exclude = [
    "**/__pycache__",
    "**/.pytest_cache",
    "**/htmlcov",
    "**/coverage.xml",
    "**/tests",
    "**/venv",
    "**/.venv",
    "**/node_modules",
    "**/build",
    "**/dist",
]

# Type checking mode
typeCheckingMode = "strict"

# Python version
pythonVersion = "3.12"

# Platform
pythonPlatform = "All"

# Additional search paths
extraPaths = ["src"]

# Report settings - strict type checking
reportMissingImports = "error"
reportMissingTypeStubs = "warning"
reportUntypedFunctionDecorator = "error"
reportUntypedClassDecorator = "error"
reportUntypedBaseClass = "error"
reportUntypedNamedTuple = "error"
reportPrivateUsage = "error"
reportConstantRedefinition = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportInconsistentConstructor = "error"
reportOverlappingOverload = "error"
reportMissingSuperCall = "error"
reportUninitializedInstanceVariable = "error"
reportInvalidStringEscapeSequence = "error"
reportUnknownParameterType = "error"
reportUnknownArgumentType = "error"
reportUnknownLambdaType = "error"
reportUnknownVariableType = "error"
reportUnknownMemberType = "error"
reportMissingParameterType = "error"
reportMissingTypeArgument = "error"
reportInvalidTypeVarUse = "error"
reportCallInDefaultInitializer = "error"
reportUnnecessaryIsInstance = "error"
reportUnnecessaryCast = "error"
reportUnnecessaryComparison = "error"
reportUnnecessaryContains = "error"
reportAssertAlwaysTrue = "error"
reportSelfClsParameterName = "error"
reportImplicitStringConcatenation = "error"
reportInvalidStubStatement = "error"
reportIncompleteStub = "error"
reportUnsupportedDunderAll = "error"
reportUnusedCoroutine = "error"
reportUnnecessaryTypeIgnoreComment = "error"
reportMatchNotExhaustive = "error"
reportShadowedImports = "error"

# Warnings for unused code
reportUnusedImport = "warning"
reportUnusedClass = "warning"
reportUnusedFunction = "warning"
reportUnusedVariable = "warning"
reportDuplicateImport = "warning"

# Optional access warnings
reportOptionalSubscript = "warning"
reportOptionalMemberAccess = "warning"
reportOptionalCall = "warning"
reportOptionalIterable = "warning"
reportOptionalContextManager = "warning"
reportOptionalOperand = "warning"
reportTypedDictNotRequiredAccess = "warning"
reportPrivateImportUsage = "warning"
reportTypeCommentUsage = "warning"

# Strict dictionary settings
strictDictionaryInference = true
strictListInference = true
strictSetInference = true

# Execution environment
executionEnvironments = [
    { root = "src", pythonVersion = "3.12", pythonPlatform = "All" }
]
