name: CI

on:
  push:
    branches: [ "main", "develop", "feat/**", "fix/**", "chore/**" ]
  pull_request:
    branches: [ "main", "develop" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write
  pull-requests: write

env:
  PYTHONUNBUFFERED: "1"
  POETRY_VERSION: "2.1.3"

jobs:
  lint:
    name: Lint (Ruff)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Cache Poetry cache directory
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Load cached venv
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: ./.venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction -E dev

      - name: Ruff check
        run: |
          poetry run ruff check . --output-format=github --exit-non-zero-on-fix

      - name: Ruff format (check)
        run: |
          poetry run ruff format --check .

  type:
    name: Type Check (Pyright)
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Cache Poetry cache directory
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Load cached venv
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: ./.venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction -E dev

      - name: Run Pyright
        run: |
          poetry run pyright
